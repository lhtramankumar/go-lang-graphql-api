package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"book/controllers"
	"book/graph/model"
	"context"
	"fmt"
	"log"
)

// CreateBookListing is the resolver for the createBookListing field.
func (r *mutationResolver) CreateBookListing(ctx context.Context, input model.NewBookListing) (*model.BookListing, error) {
	log.Println("Create a new USER")
	return controllers.CreateBookListing(input), nil
}

// UpdateBooks is the resolver for the UpdateBooks field.
func (r *mutationResolver) UpdateBooks(ctx context.Context, id string, input model.UpdateBookListing) (*model.BookListing, error) {
	fmt.Println(id, input)
	updatedbooks, err := controllers.UpdateBooks(id, input)
	if err != nil {
		return nil, err
	}

	return updatedbooks, nil
}

// DeleteBookByID is the resolver for the deleteBookById field.
func (r *mutationResolver) DeleteBookByID(ctx context.Context, id string) (*model.DeleteBook, error) {
	return controllers.DeleteBookById(id), nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.BookListing, error) {
	books, err := controllers.GetBooks()
	if err != nil {
		return nil, err
	}

	return books, nil
}

// BookbyID is the resolver for the bookbyId field.
func (r *queryResolver) BookbyID(ctx context.Context, id string) (*model.BookListing, error) {
	bookByID, err := controllers.GetBookByID(id)
	if err != nil {
		return nil, err
	}

	return bookByID, nil
}

// Bookbyauthor is the resolver for the bookbyauthor field.
func (r *queryResolver) Bookbyauthor(ctx context.Context, author string) ([]*model.BookListing, error) {
	bookbyAuthor, err := controllers.FindBooksByAuthor(author)
	if err != nil {
		return nil, err
	}

	return bookbyAuthor, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
